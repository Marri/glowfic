%table
  %thead
    %tr
      %th{colspan: 7} Daily Report
    - 0.upto(7) do |num_days|
      - day = num_days.days.ago
      - posts = Post.where(updated_at: day.beginning_of_day .. day.end_of_day).includes(:board, :user, :last_user)
      - if posts.present?
        - posts = posts.sort_by{ |p| p.replies.where(created_at: day.beginning_of_day .. day.end_of_day).order('created_at asc').first.try(:created_at) || p.edited_at }.reverse
        %tr
          %th.subber{colspan: 7}= day.strftime("%b %d, %Y")
        %tr
          %th.sub.width-15
          %th.sub Thread
          %th.sub Continuity
          %th.sub Description
          %th.sub Authors
          %th.sub Replies
          %th.sub First Update
        - posts.each do |post|
          %tr
            - klass = cycle('even', 'odd')
            - linked = post.replies.where(created_at: day.beginning_of_day .. day.end_of_day).order('created_at asc').first || post
            %td.padding-10.post-completed{class: [klass, (post.completed? ? 'post-complete' : 'post-incomplete')]}
              - if post.completed?
                = image_tag "/images/book.png", class: 'vmid', title: "Thread Complete"
            %td.padding-10{class: klass}= link_to post.subject, post_or_reply_link(linked)
            %td.padding-10.post-board{class: klass}= link_to post.board.name, board_path(post.board)
            %td.padding-10{class: klass}
              - if post.description.present?
                = sanitize(post.description, tags: %w(a), attributes: %w(href)).html_safe
            %td.padding-10{class: klass}= post.authors.map { |author| link_to fun_name(author), user_path(author) }.join(', ').html_safe
            %td.padding-10.width-70.post-replies{class: klass}= post.replies.count
            %td.padding-10{class: klass}= linked.last_updated.strftime("%l:%M %p")
